package lexer

import (
	"github.com/rdeusser/parsekit/token"
)

var DefaultConfig = Config{
	SkipWhitespace: true,
	Rules: []Rule{
		{Name: "LexIdentifier", Match: IsLetter, Action: LexIdentifier},
		{Name: "LexString", Match: IsDoubleQuote, Action: LexString},
		{Name: "LexRawString", Match: IsBackQuote, Action: LexRawString},
		{Name: "LexNumber", Match: IsNumber, Action: LexNumber},
		{Name: "LexOperator", Match: IsOperator, Action: LexOperator},
	},
	Operators: map[string]token.TokenType{
		"+":   token.ADD,
		"-":   token.SUB,
		"*":   token.MUL,
		"/":   token.QUO,
		"%":   token.REM,
		"&":   token.AND,
		"|":   token.OR,
		"^":   token.XOR,
		"<<":  token.SHL,
		">>":  token.SHR,
		"&^":  token.AND_NOT,
		"+=":  token.ADD_ASSIGN,
		"-=":  token.SUB_ASSIGN,
		"*=":  token.MUL_ASSIGN,
		"/=":  token.QUO_ASSIGN,
		"%=":  token.REM_ASSIGN,
		"&=":  token.AND_ASSIGN,
		"|=":  token.OR_ASSIGN,
		"^=":  token.XOR_ASSIGN,
		"<<=": token.SHL_ASSIGN,
		">>=": token.SHR_ASSIGN,
		"&^=": token.AND_NOT_ASSIGN,
		"&&":  token.LAND,
		"||":  token.LOR,
		"<-":  token.ARROW,
		"++":  token.INC,
		"--":  token.DEC,
		"==":  token.EQL,
		"<":   token.LSS,
		">":   token.GTR,
		"=":   token.ASSIGN,
		"!":   token.NOT,
		"!=":  token.NEQ,
		"<=":  token.LEQ,
		">=":  token.GEQ,
		":=":  token.DEFINE,
		"...": token.ELLIPSIS,
		"(":   token.LPAREN,
		"[":   token.LBRACK,
		"{":   token.LBRACE,
		"":    token.COMMA,
		".":   token.PERIOD,
		")":   token.RPAREN,
		"]":   token.RBRACK,
		"}":   token.RBRACE,
		";":   token.SEMICOLON,
		":":   token.COLON,
	},
}
